## Load libraries and set working directory:
library(devtools)
library(roxygen2)
library(usethis)
library(methods)
# Load necessary packages for `easyPois` package:
usethis::use_package("methods")
# Load necessary packages for `easyPois` package:
usethis::use_package("methods")
usethis::use_package("stats")
## Create class `PoisMLE` generator function:
use_r("PoisMLE")
## Create R file for function `logLik` in package:
use_r("logLik")
## Create `standardError.R` file in package:
use_r("standardError")
## Load libraries and set working directory:
library(devtools)
library(roxygen2)
library(usethis)
library(methods)
## Create `standardError.R` file in package:
use_r("standardError")
# Create 'estimatePois.R' file:
use_r("estimatePois")
## Create `mle.R` file in package:
use_r("mle")
# Set license (to pass check function):
use_mit_license()
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
setwd("C:/Users/edwar/Documents/GitHub/AppliedStatisticalProgramming2022/Midterm_Exam_2022")
## Load libraries and set working directory:
library(devtools)
library(roxygen2)
library(usethis)
library(methods)
setwd("C:/Users/edwar/Documents/GitHub/AppliedStatisticalProgramming2022/Midterm_Exam_2022")
# Load necessary packages for `easyPois` package:
usethis::use_package("methods")
usethis::use_package("stats")
# Set license (to pass check function):
use_mit_license()
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
## Use `check` to check that package doesn't contain significant errors and
## broadly meets CRAN standards:
check("easyPois")
# Test function by trying it out:
y <- rpois(5000,3)
PoissonStatistic <- estimatePois(y, SEtype = "basic", B = 1000)
PoissonStatistic
PoissonStatisticBootstrap <- estimate(y, SEtype = "bootstrap", B = 1000)
PoissonStatisticBootstrap <- estimatePois(y, SEtype = "bootstrap", B = 1000)
PoissonStatisticBootstrap
load_all()
rlang::last_error()
devtools::load_all()
# Within-package directory:
setwd("C:/Users/edwar/Documents/GitHub/AppliedStatisticalProgramming2022/Midterm_Exam_2022/easyPois")
devtools::load_all()
easyPois::mle
easyPois::poisMLE
easyPois::PoisMLE
easyPois::estimatePois()
easyPois::estimatePois
easyPois::logLik
easyPois::mle
easyPois::standardError
easyPois::?estimatePois()
?estimatePois()
?logLik()
?mle()
?logLik()
?logLik()
## Load libraries and set working directory:
library(devtools)
library(roxygen2)
library(usethis)
library(methods)
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
devtools::load_all() # Loads correctly.
?estimatePois() # Help file looks correct.
?logLik()
?mle()
?PoisMLE()
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
?PoisMLE()
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
devtools::load_all() # Loads correctly.
?PoisMLE()
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
?PoisMLE()
?standardError()
?standardError()
# Use incorrect inputs. See if correct/informative errors are triggered:
estimatePois(y = c(-100:-1), SEtype = "basic", B = 1000)
estimatePois(y = c(-100:-1), SEtype = "bootstrap", B = 1000)
# NA y:
estimatePois(y = c(1:5,NA,6:10), SEtype = "basic", B = 1000)
estimatePois(y = c(1:5,NA,6:10), SEtype = "bootstrap", B = 1000)
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
setwd("C:/Users/edwar/Documents/GitHub/AppliedStatisticalProgramming2022/Midterm_Exam_2022")
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
## Use `check` to check that package doesn't contain significant errors and
## broadly meets CRAN standards:
check("easyPois")
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
## Use `check` to check that package doesn't contain significant errors and
## broadly meets CRAN standards:
check("easyPois")
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
## Use `check` to check that package doesn't contain significant errors and
## broadly meets CRAN standards:
check("easyPois")
# Test function by trying it out:
y <- rpois(5000,3)
PoissonStatistic <- estimatePois(y, SEtype = "basic", B = 1000)
PoissonStatistic
PoissonStatisticBootstrap <- estimatePois(y, SEtype = "bootstrap", B = 1000)
PoissonStatisticBootstrap
# Use incorrect inputs. See if correct/informative errors are triggered:
## Negative y:
estimatePois(y = c(-100:-1), SEtype = "basic", B = 1000) #Yes.
estimatePois(y = c(-100:-1), SEtype = "bootstrap", B = 1000) #Yes.
# NA y:
estimatePois(y = c(1:5,NA,6:10), SEtype = "basic", B = 1000)
estimatePois(y = c(1:5,NA,6:10), SEtype = "bootstrap", B = 1000)
# Empty y:
estimatePois(y = c(), SEtype = "basic", B = 1000)
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
## Use `check` to check that package doesn't contain significant errors and
## broadly meets CRAN standards:
check("easyPois")
# Use incorrect inputs. See if correct/informative errors are triggered:
## Negative y:
estimatePois(y = c(-100:-1), SEtype = "basic", B = 1000) #Yes.
estimatePois(y = c(-100:-1), SEtype = "bootstrap", B = 1000) #Yes.
# NA y:
estimatePois(y = c(1:5,NA,6:10), SEtype = "basic", B = 1000)
estimatePois(y = c(1:5,NA,6:10), SEtype = "bootstrap", B = 1000)
# Empty y:
estimatePois(y = c(), SEtype = "basic", B = 1000)
estimatePois(y = c(), SEtype = "bootstrap", B = 1000)
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
## Use `check` to check that package doesn't contain significant errors and
## broadly meets CRAN standards:
check("easyPois")
PoissonStatistic <- estimatePois(y, SEtype = "basic", B = 1000)
PoissonStatistic
PoissonStatisticBootstrap <- estimatePois(y, SEtype = "bootstrap", B = 1000)
PoissonStatisticBootstrap
# Use incorrect inputs. See if correct/informative errors are triggered:
## Negative y:
estimatePois(y = c(-100:-1), SEtype = "basic", B = 1000) #Yes.
estimatePois(y = c(-100:-1), SEtype = "bootstrap", B = 1000) #Yes.
# NA y:
estimatePois(y = c(1:5,NA,6:10), SEtype = "basic", B = 1000)
estimatePois(y = c(1:5,NA,6:10), SEtype = "bootstrap", B = 1000)
# Empty y:
estimatePois(y = c(), SEtype = "basic", B = 1000)
estimatePois(y = c(-100:-1), SEtype = "bootstrap", B = 1000) #Yes.
estimatePois(y = c(1:5,NA,6:10), SEtype = "bootstrap", B = 1000)
# Empty y:
estimatePois(y = c(), SEtype = "basic", B = 1000)
estimatePois(y = c(), SEtype = "bootstrap", B = 1000)
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
## Use `check` to check that package doesn't contain significant errors and
## broadly meets CRAN standards:
check("easyPois")
# Test function by trying it out:
y <- rpois(5000,3)
PoissonStatistic <- estimatePois(y, SEtype = "basic", B = 1000)
PoissonStatistic
PoissonStatisticBootstrap <- estimatePois(y, SEtype = "bootstrap", B = 1000)
PoissonStatisticBootstrap
# Use incorrect inputs. See if correct/informative errors are triggered:
## Negative y:
estimatePois(y = c(-100:-1), SEtype = "basic", B = 1000) #Yes.
estimatePois(y = c(-100:-1), SEtype = "bootstrap", B = 1000) #Yes.
# NA y:
estimatePois(y = c(1:5,NA,6:10), SEtype = "basic", B = 1000)
estimatePois(y = c(1:5,NA,6:10), SEtype = "bootstrap", B = 1000)
# Empty y:
estimatePois(y = c(), SEtype = "basic", B = 1000)
estimatePois(y = c(), SEtype = "bootstrap", B = 1000)
# Within-package directory:
setwd("C:/Users/edwar/Documents/GitHub/AppliedStatisticalProgramming2022/Midterm_Exam_2022/easyPois")
estimatePois(y = c(1:10), SEtype = "garbage", B = 1000)
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
setwd("C:/Users/edwar/Documents/GitHub/AppliedStatisticalProgramming2022/Midterm_Exam_2022")
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
estimatePois(y = c(1:10), SEtype = "garbage", B = 1000)
estimatePois(y = c(1:10), SEtype = "basic", B = -5)
estimatePois(y = c(1:10), SEtype = "bootstrap", B = -5)
estimatePois(y = c(1:10), SEtype = "basic", B = 0)
estimatePois(y = c(1:10), SEtype = "bootstrap", B = 0)
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
estimatePois(y = c(1:10), SEtype = "basic", B = 0)
## Load libraries and set working directory:
library(devtools)
library(roxygen2)
library(usethis)
library(methods)
setwd("C:/Users/edwar/Documents/GitHub/AppliedStatisticalProgramming2022/Midterm_Exam_2022")
# Load necessary packages for `easyPois` package:
usethis::use_package("methods")
usethis::use_package("stats")
# Set license (to pass check function):
use_mit_license()
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
## Use `check` to check that package doesn't contain significant errors and
## broadly meets CRAN standards:
check("easyPois")
# Test function by trying it out:
y <- rpois(5000,3)
PoissonStatistic <- estimatePois(y, SEtype = "basic", B = 1000)
PoissonStatistic
PoissonStatisticBootstrap <- estimatePois(y, SEtype = "bootstrap", B = 1000)
PoissonStatisticBootstrap
PoissonStatistic
PoissonStatisticBootstrap
PoissonStatistic
PoissonStatisticBootstrap
PoissonStatistic
PoissonStatisticBootstrap
# Use incorrect inputs. See if correct/informative errors are triggered:
## Negative y:
estimatePois(y = c(-100:-1), SEtype = "basic", B = 1000) #Yes.
estimatePois(y = c(-100:-1), SEtype = "bootstrap", B = 1000) #Yes.
# NA y:
estimatePois(y = c(1:5,NA,6:10), SEtype = "basic", B = 1000)
estimatePois(y = c(1:5,NA,6:10), SEtype = "bootstrap", B = 1000)
# Empty y:
estimatePois(y = c(), SEtype = "basic", B = 1000)
estimatePois(y = c(), SEtype = "bootstrap", B = 1000)
# Incorrect `SEtype` & `B` inputs:
estimatePois(y = c(1:10), SEtype = "garbage", B = 1000)
estimatePois(y = c(1:10), SEtype = "basic", B = 0)
estimatePois(y = c(1:10), SEtype = "bootstrap", B = 0)
# Within-package directory:
setwd("C:/Users/edwar/Documents/GitHub/AppliedStatisticalProgramming2022/Midterm_Exam_2022/easyPois")
devtools::load_all() # Loads correctly.
?estimatePois() # Help file looks correct.
?logLik() # Help file looks correct.
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
setwd("C:/Users/edwar/Documents/GitHub/AppliedStatisticalProgramming2022/Midterm_Exam_2022")
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
## Use `check` to check that package doesn't contain significant errors and
## broadly meets CRAN standards:
check("easyPois")
?estimatePois() # Help file looks correct.
?estimatePois() # Help file looks correct.
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
?estimatePois() # Help file looks correct.
?logLik() # Help file looks correct.
?mle() # Help file looks correct.
?PoisMLE() # Help file looks correct.
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
?estimatePois() # Help file looks correct.
?logLik() # Help file looks correct.
?mle() # Help file looks correct.
?PoisMLE() # Help file looks correct.
?standardError() # Help file looks correct.
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
?estimatePois() # Help file looks correct.
?logLik() # Help file looks correct.
?mle() # Help file looks correct.
?PoisMLE() # Help file looks correct.
?standardError() # Help file looks correct.
## Load libraries and set working directory:
library(devtools)
library(roxygen2)
library(usethis)
library(methods)
setwd("C:/Users/edwar/Documents/GitHub/AppliedStatisticalProgramming2022/Midterm_Exam_2022")
# Load necessary packages for `easyPois` package:
usethis::use_package("methods")
usethis::use_package("stats")
# Set license (to pass check function):
use_mit_license()
## This code can be run as desired while the package is continually updated.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
## Use `check` to check that package doesn't contain significant errors and
## broadly meets CRAN standards:
check("easyPois")
# Test function by trying it out:
y <- rpois(5000,3)
PoissonStatistic <- estimatePois(y, SEtype = "basic", B = 1000)
PoissonStatistic
## Load libraries and set working directory:
library(devtools)
library(roxygen2)
library(usethis)
library(methods)
setwd("C:/Users/edwar/Documents/GitHub/AppliedStatisticalProgramming2022/Midterm_Exam_2022")
## This code can be run as many times as desired.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
## Run to see if package meets CRAN minimal standards:
check("easyPois")
## Load libraries and set working directory:
library(devtools)
library(roxygen2)
library(usethis)
library(methods)
## This code can be run as many times as desired.
current.code <- as.package("easyPois")
devtools::load_all(current.code)
document(current.code) # Run to fill/update `MAN` files.
## Run to see if package meets CRAN minimal standards:
check("easyPois")
estimatePois(y)
estimatePois(y, SEtype = "bootstrap")
